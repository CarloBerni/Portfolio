{"version":3,"sources":["../node_modules/rellax/rellax.js","Js/sub.js","Js/main.js"],"names":["double","value","console","log","helpers","rellax","Rellax","horizontals","document","querySelectorAll","forEach","horizontal","inner","querySelector","window","addEventListener","requestAnimationFrame","toGo","offsetHeight","innerHeight","position","scrollY","offsetTop","progression","classList","add","remove","setTranslateX","element","toMove","offsetWidth","innerWidth","transform","style","VANTA","WAVES","el","color","shininess","waveHeight","zoom"],"mappingseCxUe;AACbA,EAAAA,MAAM,EAAE,gBAASC,KAAT,EAAgB;AACtB,WAAOA,KAAK,GAAG,CAAf;AACD;AAHY;;;;;ACAf;;AACA;;;;AAEAC,OAAO,CAACC,GAAR,CAAYC,aAAQJ,MAAR,CAAe,EAAf,CAAZ;AACAE,OAAO,CAACC,GAAR,CAAYE,MAAZ;AAGA,IAAIA,MAAM,GAAG,IAAIC,eAAJ,CAAW,kBAAX,EAA+B,EAA/B,CAAb,EAIA;;AACA,IAAIC,WAAW,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,sBAA1B,CAAlB,EAEA;;AACAF,WAAW,CAACG,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AAExC;AACA,MAAIC,KAAK,GAAGD,UAAU,CAACE,aAAX,CAAyB,iBAAzB,CAAZ,CAHwC,CAKxC;;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,YAAY;AAC5CD,IAAAA,MAAM,CAACE,qBAAP,CAA6B,YAAY;AAEvC;AACA;AACA,UAAIC,IAAI,GAAGN,UAAU,CAACO,YAAX,GAA0BJ,MAAM,CAACK,WAA5C,CAJuC,CAMvC;AACA;;AACA,UAAIC,QAAQ,GAAGN,MAAM,CAACO,OAAP,GAAiBV,UAAU,CAACW,SAA3C,CARuC,CAUvC;AACA;;AACA,UAAIC,WAAW,GAAIH,QAAQ,GAAGH,IAA9B,CAZuC,CAcvC;AACA;;AACA,UAAIM,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAG,CAArC,EAAwC;AACtCZ,QAAAA,UAAU,CAACa,SAAX,CAAqBC,GAArB,CAAyB,kBAAzB;AACD,OAFD,MAEO;AAAE;AACPd,QAAAA,UAAU,CAACa,SAAX,CAAqBE,MAArB,CAA4B,kBAA5B;AACD,OApBsC,CAsBvC;AACA;;;AACA,UAAIH,WAAW,IAAI,CAAnB,EAAsB;AACpBZ,QAAAA,UAAU,CAACa,SAAX,CAAqBC,GAArB,CAAyB,qBAAzB;AACD,OAFD,MAEO;AACLd,QAAAA,UAAU,CAACa,SAAX,CAAqBE,MAArB,CAA4B,qBAA5B;AACD,OA5BsC,CA8BvC;;;AACAC,MAAAA,aAAa,CAACf,KAAD,EAAQW,WAAR,CAAb;AACD,KAhCD;AAiCD,GAlCD;AAmCD,CAzCD;;AA2CA,SAASI,aAAT,CAAuBC,OAAvB,EAAgCL,WAAhC,EAA6C;AAC3C;AACA,MAAIA,WAAW,GAAG,CAAlB,EAAqB;AACnBA,IAAAA,WAAW,GAAG,CAAd;AACD,GAFD,MAEO,IAAIA,WAAW,GAAG,CAAlB,EAAqB;AAC1BA,IAAAA,WAAW,GAAG,CAAd;AACD,GAN0C,CAQ3C;;;AACA,MAAIM,MAAM,GAAGD,OAAO,CAACE,WAAR,GAAsBhB,MAAM,CAACiB,UAA1C,CAT2C,CAW3C;;AACA,MAAIC,SAAS,GAAI,CAAC,CAAD,GAAKH,MAAL,GAAcN,WAAf,GAA8B,IAA9C;AACAK,EAAAA,OAAO,CAACK,KAAR,CAAcD,SAAd,GAA0B,gBAAgBA,SAAhB,GAA4B,GAAtD;AACD,EAKD;;;AAGAE,KAAK,CAACC,KAAN,CAAY;AACVC,EAAAA,EAAE,EAAE,UADM;AAEVC,EAAAA,KAAK,EAAE,GAFG;AAGVC,EAAAA,SAAS,EAAE,KAHD;AAIVC,EAAAA,UAAU,EAAE,KAJF;AAKVC,EAAAA,IAAI,EAAE;AALI,CAAZ","file":"main.ba5518d6.map","sourceRoot":"../src","sourcesContent":["\n// ------------------------------------------\n// Rellax.js\n// Buttery smooth parallax library\n// Copyright (c) 2016 Moe Amaya (@moeamaya)\n// MIT license\n//\n// Thanks to Paraxify.js and Jaime Cabllero\n// for parallax concepts\n// ------------------------------------------\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.Rellax = factory();\n  }\n}(typeof window !== \"undefined\" ? window : global, function () {\n  var Rellax = function(el, options){\n    \"use strict\";\n\n    var self = Object.create(Rellax.prototype);\n\n    var posY = 0;\n    var screenY = 0;\n    var posX = 0;\n    var screenX = 0;\n    var blocks = [];\n    var pause = true;\n\n    // check what requestAnimationFrame to use, and if\n    // it's not supported, use the onscroll event\n    var loop = window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      window.msRequestAnimationFrame ||\n      window.oRequestAnimationFrame ||\n      function(callback){ return setTimeout(callback, 1000 / 60); };\n\n    // store the id for later use\n    var loopId = null;\n\n    // check what cancelAnimation method to use\n    var clearLoop = window.cancelAnimationFrame || window.mozCancelAnimationFrame || clearTimeout;\n\n    // check which transform property to use\n    var transformProp = window.transformProp || (function(){\n        var testEl = document.createElement('div');\n        if (testEl.style.transform === null) {\n          var vendors = ['Webkit', 'Moz', 'ms'];\n          for (var vendor in vendors) {\n            if (testEl.style[ vendors[vendor] + 'Transform' ] !== undefined) {\n              return vendors[vendor] + 'Transform';\n            }\n          }\n        }\n        return 'transform';\n      })();\n\n    // Default Settings\n    self.options = {\n      speed: -2,\n      center: false,\n      wrapper: null,\n      relativeToWrapper: false,\n      round: true,\n      vertical: true,\n      horizontal: false,\n      callback: function() {},\n    };\n\n    // User defined options (might have more in the future)\n    if (options){\n      Object.keys(options).forEach(function(key){\n        self.options[key] = options[key];\n      });\n    }\n\n    // By default, rellax class\n    if (!el) {\n      el = '.rellax';\n    }\n\n    // check if el is a className or a node\n    var elements = typeof el === 'string' ? document.querySelectorAll(el) : [el];\n\n    // Now query selector\n    if (elements.length > 0) {\n      self.elems = elements;\n    }\n\n    // The elements don't exist\n    else {\n      throw new Error(\"The elements you're trying to select don't exist.\");\n    }\n\n    // Has a wrapper and it exists\n    if (self.options.wrapper) {\n      if (!self.options.wrapper.nodeType) {\n        var wrapper = document.querySelector(self.options.wrapper);\n\n        if (wrapper) {\n          self.options.wrapper = wrapper;\n        } else {\n          throw new Error(\"The wrapper you're trying to use don't exist.\");\n        }\n      }\n    }\n\n\n    // Get and cache initial position of all elements\n    var cacheBlocks = function() {\n      for (var i = 0; i < self.elems.length; i++){\n        var block = createBlock(self.elems[i]);\n        blocks.push(block);\n      }\n    };\n\n\n    // Let's kick this script off\n    // Build array for cached element values\n    var init = function() {\n      for (var i = 0; i < blocks.length; i++){\n        self.elems[i].style.cssText = blocks[i].style;\n      }\n\n      blocks = [];\n\n      screenY = window.innerHeight;\n      screenX = window.innerWidth;\n      setPosition();\n\n      cacheBlocks();\n\n      // If paused, unpause and set listener for window resizing events\n      if (pause) {\n        window.addEventListener('resize', init);\n        pause = false;\n      }\n      animate();\n    };\n\n    // We want to cache the parallax blocks'\n    // values: base, top, height, speed\n    // el: is dom object, return: el cache values\n    var createBlock = function(el) {\n      var dataPercentage = el.getAttribute( 'data-rellax-percentage' );\n      var dataSpeed = el.getAttribute( 'data-rellax-speed' );\n      var dataZindex = el.getAttribute( 'data-rellax-zindex' ) || 0;\n\n      // initializing at scrollY = 0 (top of browser), scrollX = 0 (left of browser)\n      // ensures elements are positioned based on HTML layout.\n      //\n      // If the element has the percentage attribute, the posY and posX needs to be\n      // the current scroll position's value, so that the elements are still positioned based on HTML layout\n      var wrapperPosY = self.options.wrapper ? self.options.wrapper.scrollTop : (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);\n      // If the option relativeToWrapper is true, use the wrappers offset to top, subtracted from the current page scroll.\n      if (self.options.relativeToWrapper) {\n        var scrollPosY = (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);\n        wrapperPosY = scrollPosY - self.options.wrapper.offsetTop;\n      }\n      var posY = self.options.vertical ? ( dataPercentage || self.options.center ? wrapperPosY : 0 ) : 0;\n      var posX = self.options.horizontal ? ( dataPercentage || self.options.center ? (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft) : 0 ) : 0;\n\n      var blockTop = posY + el.getBoundingClientRect().top;\n      var blockHeight = el.clientHeight || el.offsetHeight || el.scrollHeight;\n\n      var blockLeft = posX + el.getBoundingClientRect().left;\n      var blockWidth = el.clientWidth || el.offsetWidth || el.scrollWidth;\n\n      // apparently parallax equation everyone uses\n      var percentageY = dataPercentage ? dataPercentage : (posY - blockTop + screenY) / (blockHeight + screenY);\n      var percentageX = dataPercentage ? dataPercentage : (posX - blockLeft + screenX) / (blockWidth + screenX);\n      if(self.options.center){ percentageX = 0.5; percentageY = 0.5; }\n\n      // Optional individual block speed as data attr, otherwise global speed\n      var speed = dataSpeed ? dataSpeed : self.options.speed;\n\n      var bases = updatePosition(percentageX, percentageY, speed);\n\n      // ~~Store non-translate3d transforms~~\n      // Store inline styles and extract transforms\n      var style = el.style.cssText;\n      var transform = '';\n\n      // Check if there's an inline styled transform\n      if (style.indexOf('transform') >= 0) {\n        // Get the index of the transform\n        var index = style.indexOf('transform');\n\n        // Trim the style to the transform point and get the following semi-colon index\n        var trimmedStyle = style.slice(index);\n        var delimiter = trimmedStyle.indexOf(';');\n\n        // Remove \"transform\" string and save the attribute\n        if (delimiter) {\n          transform = \" \" + trimmedStyle.slice(11, delimiter).replace(/\\s/g,'');\n        } else {\n          transform = \" \" + trimmedStyle.slice(11).replace(/\\s/g,'');\n        }\n      }\n\n      return {\n        baseX: bases.x,\n        baseY: bases.y,\n        top: blockTop,\n        left: blockLeft,\n        height: blockHeight,\n        width: blockWidth,\n        speed: speed,\n        style: style,\n        transform: transform,\n        zindex: dataZindex\n      };\n    };\n\n    // set scroll position (posY, posX)\n    // side effect method is not ideal, but okay for now\n    // returns true if the scroll changed, false if nothing happened\n    var setPosition = function() {\n      var oldY = posY;\n      var oldX = posX;\n\n      posY = self.options.wrapper ? self.options.wrapper.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop || window.pageYOffset;\n      posX = self.options.wrapper ? self.options.wrapper.scrollLeft : (document.documentElement || document.body.parentNode || document.body).scrollLeft || window.pageXOffset;\n      // If option relativeToWrapper is true, use relative wrapper value instead.\n      if (self.options.relativeToWrapper) {\n        var scrollPosY = (document.documentElement || document.body.parentNode || document.body).scrollTop || window.pageYOffset;\n        posY = scrollPosY - self.options.wrapper.offsetTop;\n      }\n\n\n      if (oldY != posY && self.options.vertical) {\n        // scroll changed, return true\n        return true;\n      }\n\n      if (oldX != posX && self.options.horizontal) {\n        // scroll changed, return true\n        return true;\n      }\n\n      // scroll did not change\n      return false;\n    };\n\n    // Ahh a pure function, gets new transform value\n    // based on scrollPosition and speed\n    // Allow for decimal pixel values\n    var updatePosition = function(percentageX, percentageY, speed) {\n      var result = {};\n      var valueX = (speed * (100 * (1 - percentageX)));\n      var valueY = (speed * (100 * (1 - percentageY)));\n\n      result.x = self.options.round ? Math.round(valueX) : Math.round(valueX * 100) / 100;\n      result.y = self.options.round ? Math.round(valueY) : Math.round(valueY * 100) / 100;\n\n      return result;\n    };\n\n    // Loop\n    var update = function() {\n      if (setPosition() && pause === false) {\n        animate();\n      }\n\n      // loop again\n      loopId = loop(update);\n    };\n\n    // Transform3d on parallax element\n    var animate = function() {\n      var positions;\n      for (var i = 0; i < self.elems.length; i++){\n        var percentageY = ((posY - blocks[i].top + screenY) / (blocks[i].height + screenY));\n        var percentageX = ((posX - blocks[i].left + screenX) / (blocks[i].width + screenX));\n\n        // Subtracting initialize value, so element stays in same spot as HTML\n        positions = updatePosition(percentageX, percentageY, blocks[i].speed);// - blocks[i].baseX;\n        var positionY = positions.y - blocks[i].baseY;\n        var positionX = positions.x - blocks[i].baseX;\n\n        var zindex = blocks[i].zindex;\n\n        // Move that element\n        // (Set the new translation and append initial inline transforms.)\n        var translate = 'translate3d(' + (self.options.horizontal ? positionX : '0') + 'px,' + (self.options.vertical ? positionY : '0') + 'px,' + zindex + 'px) ' + blocks[i].transform;\n        self.elems[i].style[transformProp] = translate;\n      }\n      self.options.callback(positions);\n    };\n\n    self.destroy = function() {\n      for (var i = 0; i < self.elems.length; i++){\n        self.elems[i].style.cssText = blocks[i].style;\n      }\n\n      // Remove resize event listener if not pause, and pause\n      if (!pause) {\n        window.removeEventListener('resize', init);\n        pause = true;\n      }\n\n      // Clear the animation loop to prevent possible memory leak\n      clearLoop(loopId);\n      loopId = null;\n    };\n\n    // Init\n    init();\n\n    // Start the loop\n    update();\n\n    // Allow to recalculate the initial values whenever we want\n    self.refresh = init;\n\n    return self;\n  };\n  return Rellax;\n}));\n","export default {\n  double: function(value) {\n    return value * 2;\n  }\n}","import Rellax from 'rellax';\nimport helpers from './sub';\n\nconsole.log(helpers.double(12));\nconsole.log(rellax);\n\n\nvar rellax = new Rellax(\".section__rellax\", {});\n\n\n\n// Get all horizontal scroll element\nvar horizontals = document.querySelectorAll('.section--horizontal');\n\n// For each horizontal scroll element, apply the effect\nhorizontals.forEach(function (horizontal) {\n\n  // Get the inner element\n  var inner = horizontal.querySelector('.section__inner');\n\n  // When the user scroll and an animation frame is available\n  window.addEventListener('scroll', function () {\n    window.requestAnimationFrame(function () {\n\n      // The distance to scroll inside the horizontal element\n      // is its height - the window's height\n      var toGo = horizontal.offsetHeight - window.innerHeight;\n\n      // The scroll position inside the element\n      // is the scroll position - the element's distance from the top\n      var position = window.scrollY - horizontal.offsetTop;\n\n      // The progression between 0 & 1 is the scroll position\n      // inside the element divided by the distance to scroll\n      var progression = (position / toGo);\n\n      // If progression is between 0 & 1 that means we are viewing\n      // the section so fix it\n      if (progression > 0 && progression < 1) {\n        horizontal.classList.add('section--isFixed');\n      } else { // Don't fix it\n        horizontal.classList.remove('section--isFixed');\n      }\n\n      // If the progression is above 1 that means the\n      // section has been completly scrolled\n      if (progression >= 1) {\n        horizontal.classList.add('section--isScrolled');\n      } else {\n        horizontal.classList.remove('section--isScrolled');\n      }\n\n      // Set the translation for the element\n      setTranslateX(inner, progression);\n    });\n  });\n});\n\nfunction setTranslateX(element, progression) {\n  // Limit the progression factor between 0 & 1\n  if (progression > 1) {\n    progression = 1;\n  } else if (progression < 0) {\n    progression = 0;\n  }\n\n  // The size to move is the element width minus the window width\n  var toMove = element.offsetWidth - window.innerWidth;\n\n  // The transform factor is the size to move multiplied by the progression\n  var transform = (-1 * toMove * progression) + 'px';\n  element.style.transform = 'translateX(' + transform + ')';\n}\n\n\n\n\n// adding the plug\n\n\nVANTA.WAVES({\n  el: \"#vantajs\",\n  color: 0x0,\n  shininess: 50.00,\n  waveHeight: 20.00,\n  zoom: 0.97\n}) "]}