{"id":"../node_modules/autoprefixer/lib/declaration.js","dependencies":[{"name":"/Users/carloberni/Documents/portfolio/Portfolio/package.json","includedInParent":true,"mtime":1547198646726},{"name":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1547031337632},{"name":"./prefixer","loc":{"line":6,"column":21},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/declaration.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/prefixer.js"},{"name":"./browsers","loc":{"line":8,"column":21},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/declaration.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/browsers.js"},{"name":"./utils","loc":{"line":10,"column":18},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/declaration.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/utils.js"}],"generated":{"js":"(function() {\n  var Browsers, Declaration, Prefixer, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  Browsers = require('./browsers');\n\n  utils = require('./utils');\n\n  Declaration = (function(superClass) {\n    extend(Declaration, superClass);\n\n    function Declaration() {\n      return Declaration.__super__.constructor.apply(this, arguments);\n    }\n\n    Declaration.prototype.check = function(decl) {\n      return true;\n    };\n\n    Declaration.prototype.prefixed = function(prop, prefix) {\n      return prefix + prop;\n    };\n\n    Declaration.prototype.normalize = function(prop) {\n      return prop;\n    };\n\n    Declaration.prototype.otherPrefixes = function(value, prefix) {\n      var j, len, other, ref;\n      ref = Browsers.prefixes();\n      for (j = 0, len = ref.length; j < len; j++) {\n        other = ref[j];\n        if (other === prefix) {\n          continue;\n        }\n        if (value.indexOf(other) !== -1) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    Declaration.prototype.set = function(decl, prefix) {\n      decl.prop = this.prefixed(decl.prop, prefix);\n      return decl;\n    };\n\n    Declaration.prototype.needCascade = function(decl) {\n      return decl._autoprefixerCascade || (decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').indexOf('\\n') !== -1);\n    };\n\n    Declaration.prototype.maxPrefixed = function(prefixes, decl) {\n      var j, len, max, prefix;\n      if (decl._autoprefixerMax) {\n        return decl._autoprefixerMax;\n      }\n      max = 0;\n      for (j = 0, len = prefixes.length; j < len; j++) {\n        prefix = prefixes[j];\n        prefix = utils.removeNote(prefix);\n        if (prefix.length > max) {\n          max = prefix.length;\n        }\n      }\n      return decl._autoprefixerMax = max;\n    };\n\n    Declaration.prototype.calcBefore = function(prefixes, decl, prefix) {\n      var before, diff, i, j, max, ref;\n      if (prefix == null) {\n        prefix = '';\n      }\n      before = decl.raw('before');\n      max = this.maxPrefixed(prefixes, decl);\n      diff = max - utils.removeNote(prefix).length;\n      for (i = j = 0, ref = diff; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        before += ' ';\n      }\n      return before;\n    };\n\n    Declaration.prototype.restoreBefore = function(decl) {\n      var lines, min;\n      lines = decl.raw('before').split(\"\\n\");\n      min = lines[lines.length - 1];\n      this.all.group(decl).up(function(prefixed) {\n        var array, last;\n        array = prefixed.raw('before').split(\"\\n\");\n        last = array[array.length - 1];\n        if (last.length < min.length) {\n          return min = last;\n        }\n      });\n      lines[lines.length - 1] = min;\n      return decl.raws.before = lines.join(\"\\n\");\n    };\n\n    Declaration.prototype.insert = function(decl, prefix, prefixes) {\n      var already, cloned;\n      cloned = this.set(this.clone(decl), prefix);\n      if (!cloned) {\n        return;\n      }\n      already = decl.parent.some(function(i) {\n        return i.prop === cloned.prop && i.value === cloned.value;\n      });\n      if (already) {\n        return;\n      }\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n      return decl.parent.insertBefore(decl, cloned);\n    };\n\n    Declaration.prototype.isAlready = function(decl, prefixed) {\n      var already;\n      already = this.all.group(decl).up(function(i) {\n        return i.prop === prefixed;\n      });\n      already || (already = this.all.group(decl).down(function(i) {\n        return i.prop === prefixed;\n      }));\n      return already;\n    };\n\n    Declaration.prototype.add = function(decl, prefix, prefixes) {\n      var prefixed;\n      prefixed = this.prefixed(decl.prop, prefix);\n      if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n        return;\n      }\n      return this.insert(decl, prefix, prefixes);\n    };\n\n    Declaration.prototype.process = function(decl) {\n      var prefixes;\n      if (this.needCascade(decl)) {\n        prefixes = Declaration.__super__.process.apply(this, arguments);\n        if (prefixes != null ? prefixes.length : void 0) {\n          this.restoreBefore(decl);\n          return decl.raws.before = this.calcBefore(prefixes, decl);\n        }\n      } else {\n        return Declaration.__super__.process.apply(this, arguments);\n      }\n    };\n\n    Declaration.prototype.old = function(prop, prefix) {\n      return [this.prefixed(prop, prefix)];\n    };\n\n    return Declaration;\n\n  })(Prefixer);\n\n  module.exports = Declaration;\n\n}).call(this);\n","map":{"mappings":[{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/autoprefixer/lib/declaration.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}}],"sources":{"../node_modules/autoprefixer/lib/declaration.js":"(function() {\n  var Browsers, Declaration, Prefixer, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  Browsers = require('./browsers');\n\n  utils = require('./utils');\n\n  Declaration = (function(superClass) {\n    extend(Declaration, superClass);\n\n    function Declaration() {\n      return Declaration.__super__.constructor.apply(this, arguments);\n    }\n\n    Declaration.prototype.check = function(decl) {\n      return true;\n    };\n\n    Declaration.prototype.prefixed = function(prop, prefix) {\n      return prefix + prop;\n    };\n\n    Declaration.prototype.normalize = function(prop) {\n      return prop;\n    };\n\n    Declaration.prototype.otherPrefixes = function(value, prefix) {\n      var j, len, other, ref;\n      ref = Browsers.prefixes();\n      for (j = 0, len = ref.length; j < len; j++) {\n        other = ref[j];\n        if (other === prefix) {\n          continue;\n        }\n        if (value.indexOf(other) !== -1) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    Declaration.prototype.set = function(decl, prefix) {\n      decl.prop = this.prefixed(decl.prop, prefix);\n      return decl;\n    };\n\n    Declaration.prototype.needCascade = function(decl) {\n      return decl._autoprefixerCascade || (decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').indexOf('\\n') !== -1);\n    };\n\n    Declaration.prototype.maxPrefixed = function(prefixes, decl) {\n      var j, len, max, prefix;\n      if (decl._autoprefixerMax) {\n        return decl._autoprefixerMax;\n      }\n      max = 0;\n      for (j = 0, len = prefixes.length; j < len; j++) {\n        prefix = prefixes[j];\n        prefix = utils.removeNote(prefix);\n        if (prefix.length > max) {\n          max = prefix.length;\n        }\n      }\n      return decl._autoprefixerMax = max;\n    };\n\n    Declaration.prototype.calcBefore = function(prefixes, decl, prefix) {\n      var before, diff, i, j, max, ref;\n      if (prefix == null) {\n        prefix = '';\n      }\n      before = decl.raw('before');\n      max = this.maxPrefixed(prefixes, decl);\n      diff = max - utils.removeNote(prefix).length;\n      for (i = j = 0, ref = diff; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        before += ' ';\n      }\n      return before;\n    };\n\n    Declaration.prototype.restoreBefore = function(decl) {\n      var lines, min;\n      lines = decl.raw('before').split(\"\\n\");\n      min = lines[lines.length - 1];\n      this.all.group(decl).up(function(prefixed) {\n        var array, last;\n        array = prefixed.raw('before').split(\"\\n\");\n        last = array[array.length - 1];\n        if (last.length < min.length) {\n          return min = last;\n        }\n      });\n      lines[lines.length - 1] = min;\n      return decl.raws.before = lines.join(\"\\n\");\n    };\n\n    Declaration.prototype.insert = function(decl, prefix, prefixes) {\n      var already, cloned;\n      cloned = this.set(this.clone(decl), prefix);\n      if (!cloned) {\n        return;\n      }\n      already = decl.parent.some(function(i) {\n        return i.prop === cloned.prop && i.value === cloned.value;\n      });\n      if (already) {\n        return;\n      }\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n      return decl.parent.insertBefore(decl, cloned);\n    };\n\n    Declaration.prototype.isAlready = function(decl, prefixed) {\n      var already;\n      already = this.all.group(decl).up(function(i) {\n        return i.prop === prefixed;\n      });\n      already || (already = this.all.group(decl).down(function(i) {\n        return i.prop === prefixed;\n      }));\n      return already;\n    };\n\n    Declaration.prototype.add = function(decl, prefix, prefixes) {\n      var prefixed;\n      prefixed = this.prefixed(decl.prop, prefix);\n      if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n        return;\n      }\n      return this.insert(decl, prefix, prefixes);\n    };\n\n    Declaration.prototype.process = function(decl) {\n      var prefixes;\n      if (this.needCascade(decl)) {\n        prefixes = Declaration.__super__.process.apply(this, arguments);\n        if (prefixes != null ? prefixes.length : void 0) {\n          this.restoreBefore(decl);\n          return decl.raws.before = this.calcBefore(prefixes, decl);\n        }\n      } else {\n        return Declaration.__super__.process.apply(this, arguments);\n      }\n    };\n\n    Declaration.prototype.old = function(prop, prefix) {\n      return [this.prefixed(prop, prefix)];\n    };\n\n    return Declaration;\n\n  })(Prefixer);\n\n  module.exports = Declaration;\n\n}).call(this);\n"},"lineCount":163}},"hash":"7a54990359f8ed2d81b3300f7c3d1fd3","cacheData":{"env":{}}}