{"id":"../node_modules/autoprefixer/lib/at-rule.js","dependencies":[{"name":"/Users/carloberni/Documents/portfolio/Portfolio/package.json","includedInParent":true,"mtime":1547198646726},{"name":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1547031337632},{"name":"./prefixer","loc":{"line":6,"column":21},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/at-rule.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/prefixer.js"}],"generated":{"js":"(function() {\n  var AtRule, Prefixer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  AtRule = (function(superClass) {\n    extend(AtRule, superClass);\n\n    function AtRule() {\n      return AtRule.__super__.constructor.apply(this, arguments);\n    }\n\n    AtRule.prototype.add = function(rule, prefix) {\n      var already, cloned, prefixed;\n      prefixed = prefix + rule.name;\n      already = rule.parent.some(function(i) {\n        return i.name === prefixed && i.params === rule.params;\n      });\n      if (already) {\n        return;\n      }\n      cloned = this.clone(rule, {\n        name: prefixed\n      });\n      return rule.parent.insertBefore(rule, cloned);\n    };\n\n    AtRule.prototype.process = function(node) {\n      var j, len, parent, prefix, ref, results;\n      parent = this.parentPrefix(node);\n      ref = this.prefixes;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        prefix = ref[j];\n        if (parent && parent !== prefix) {\n          continue;\n        }\n        results.push(this.add(node, prefix));\n      }\n      return results;\n    };\n\n    return AtRule;\n\n  })(Prefixer);\n\n  module.exports = AtRule;\n\n}).call(this);\n","map":{"mappings":[{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/autoprefixer/lib/at-rule.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"../node_modules/autoprefixer/lib/at-rule.js":"(function() {\n  var AtRule, Prefixer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  AtRule = (function(superClass) {\n    extend(AtRule, superClass);\n\n    function AtRule() {\n      return AtRule.__super__.constructor.apply(this, arguments);\n    }\n\n    AtRule.prototype.add = function(rule, prefix) {\n      var already, cloned, prefixed;\n      prefixed = prefix + rule.name;\n      already = rule.parent.some(function(i) {\n        return i.name === prefixed && i.params === rule.params;\n      });\n      if (already) {\n        return;\n      }\n      cloned = this.clone(rule, {\n        name: prefixed\n      });\n      return rule.parent.insertBefore(rule, cloned);\n    };\n\n    AtRule.prototype.process = function(node) {\n      var j, len, parent, prefix, ref, results;\n      parent = this.parentPrefix(node);\n      ref = this.prefixes;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        prefix = ref[j];\n        if (parent && parent !== prefix) {\n          continue;\n        }\n        results.push(this.add(node, prefix));\n      }\n      return results;\n    };\n\n    return AtRule;\n\n  })(Prefixer);\n\n  module.exports = AtRule;\n\n}).call(this);\n"},"lineCount":52}},"hash":"cd6eb1d544b10f8f96e5c631e0cc3f0b","cacheData":{"env":{}}}