{"id":"../node_modules/autoprefixer/lib/resolution.js","dependencies":[{"name":"/Users/carloberni/Documents/portfolio/Portfolio/package.json","includedInParent":true,"mtime":1547198646726},{"name":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1547031337632},{"name":"./prefixer","loc":{"line":6,"column":21},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/resolution.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/prefixer.js"},{"name":"./utils","loc":{"line":8,"column":18},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/resolution.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/utils.js"},{"name":"num2fraction","loc":{"line":10,"column":16},"parent":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/autoprefixer/lib/resolution.js","resolved":"/Users/carloberni/Documents/portfolio/Portfolio/node_modules/num2fraction/index.js"}],"generated":{"js":"(function() {\n  var Prefixer, Resolution, n2f, regexp, split, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  utils = require('./utils');\n\n  n2f = require('num2fraction');\n\n  regexp = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpi)/gi;\n\n  split = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpi)/i;\n\n  Resolution = (function(superClass) {\n    extend(Resolution, superClass);\n\n    function Resolution() {\n      return Resolution.__super__.constructor.apply(this, arguments);\n    }\n\n    Resolution.prototype.prefixName = function(prefix, name) {\n      return name = prefix === '-moz-' ? name + '--moz-device-pixel-ratio' : prefix + name + '-device-pixel-ratio';\n    };\n\n    Resolution.prototype.prefixQuery = function(prefix, name, colon, value, units) {\n      if (units === 'dpi') {\n        value = Number(value / 96);\n      }\n      if (prefix === '-o-') {\n        value = n2f(value);\n      }\n      return this.prefixName(prefix, name) + colon + value;\n    };\n\n    Resolution.prototype.clean = function(rule) {\n      var j, len, prefix, ref;\n      if (!this.bad) {\n        this.bad = [];\n        ref = this.prefixes;\n        for (j = 0, len = ref.length; j < len; j++) {\n          prefix = ref[j];\n          this.bad.push(this.prefixName(prefix, 'min'));\n          this.bad.push(this.prefixName(prefix, 'max'));\n        }\n      }\n      return rule.params = utils.editList(rule.params, (function(_this) {\n        return function(queries) {\n          return queries.filter(function(query) {\n            return _this.bad.every(function(i) {\n              return query.indexOf(i) === -1;\n            });\n          });\n        };\n      })(this));\n    };\n\n    Resolution.prototype.process = function(rule) {\n      var parent, prefixes;\n      parent = this.parentPrefix(rule);\n      prefixes = parent ? [parent] : this.prefixes;\n      return rule.params = utils.editList(rule.params, (function(_this) {\n        return function(origin, prefixed) {\n          var j, k, len, len1, prefix, processed, query;\n          for (j = 0, len = origin.length; j < len; j++) {\n            query = origin[j];\n            if (query.indexOf('min-resolution') === -1 && query.indexOf('max-resolution') === -1) {\n              prefixed.push(query);\n              continue;\n            }\n            for (k = 0, len1 = prefixes.length; k < len1; k++) {\n              prefix = prefixes[k];\n              if (prefix === '-moz-' && rule.params.indexOf('dpi') !== -1) {\n                continue;\n              } else {\n                processed = query.replace(regexp, function(str) {\n                  var parts;\n                  parts = str.match(split);\n                  return _this.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n                });\n                prefixed.push(processed);\n              }\n            }\n            prefixed.push(query);\n          }\n          return utils.uniq(prefixed);\n        };\n      })(this));\n    };\n\n    return Resolution;\n\n  })(Prefixer);\n\n  module.exports = Resolution;\n\n}).call(this);\n","map":{"mappings":[{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/autoprefixer/lib/resolution.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}}],"sources":{"../node_modules/autoprefixer/lib/resolution.js":"(function() {\n  var Prefixer, Resolution, n2f, regexp, split, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Prefixer = require('./prefixer');\n\n  utils = require('./utils');\n\n  n2f = require('num2fraction');\n\n  regexp = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpi)/gi;\n\n  split = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpi)/i;\n\n  Resolution = (function(superClass) {\n    extend(Resolution, superClass);\n\n    function Resolution() {\n      return Resolution.__super__.constructor.apply(this, arguments);\n    }\n\n    Resolution.prototype.prefixName = function(prefix, name) {\n      return name = prefix === '-moz-' ? name + '--moz-device-pixel-ratio' : prefix + name + '-device-pixel-ratio';\n    };\n\n    Resolution.prototype.prefixQuery = function(prefix, name, colon, value, units) {\n      if (units === 'dpi') {\n        value = Number(value / 96);\n      }\n      if (prefix === '-o-') {\n        value = n2f(value);\n      }\n      return this.prefixName(prefix, name) + colon + value;\n    };\n\n    Resolution.prototype.clean = function(rule) {\n      var j, len, prefix, ref;\n      if (!this.bad) {\n        this.bad = [];\n        ref = this.prefixes;\n        for (j = 0, len = ref.length; j < len; j++) {\n          prefix = ref[j];\n          this.bad.push(this.prefixName(prefix, 'min'));\n          this.bad.push(this.prefixName(prefix, 'max'));\n        }\n      }\n      return rule.params = utils.editList(rule.params, (function(_this) {\n        return function(queries) {\n          return queries.filter(function(query) {\n            return _this.bad.every(function(i) {\n              return query.indexOf(i) === -1;\n            });\n          });\n        };\n      })(this));\n    };\n\n    Resolution.prototype.process = function(rule) {\n      var parent, prefixes;\n      parent = this.parentPrefix(rule);\n      prefixes = parent ? [parent] : this.prefixes;\n      return rule.params = utils.editList(rule.params, (function(_this) {\n        return function(origin, prefixed) {\n          var j, k, len, len1, prefix, processed, query;\n          for (j = 0, len = origin.length; j < len; j++) {\n            query = origin[j];\n            if (query.indexOf('min-resolution') === -1 && query.indexOf('max-resolution') === -1) {\n              prefixed.push(query);\n              continue;\n            }\n            for (k = 0, len1 = prefixes.length; k < len1; k++) {\n              prefix = prefixes[k];\n              if (prefix === '-moz-' && rule.params.indexOf('dpi') !== -1) {\n                continue;\n              } else {\n                processed = query.replace(regexp, function(str) {\n                  var parts;\n                  parts = str.match(split);\n                  return _this.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n                });\n                prefixed.push(processed);\n              }\n            }\n            prefixed.push(query);\n          }\n          return utils.uniq(prefixed);\n        };\n      })(this));\n    };\n\n    return Resolution;\n\n  })(Prefixer);\n\n  module.exports = Resolution;\n\n}).call(this);\n"},"lineCount":99}},"hash":"94b02da764ea1cd9fd83263f4c25beed","cacheData":{"env":{}}}